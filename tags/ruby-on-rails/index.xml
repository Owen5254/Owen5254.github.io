<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Rails on Yu 的 Blog</title>
    <link>https://Owen5254.github.io/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on Yu 的 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 08 Feb 2023 02:16:21 +0800</lastBuildDate><atom:link href="https://Owen5254.github.io/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rails寶典 第二章</title>
      <link>https://Owen5254.github.io/2023/02/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</link>
      <pubDate>Wed, 08 Feb 2023 02:16:21 +0800</pubDate>
      
      <guid>https://Owen5254.github.io/2023/02/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</guid>
      <description>♦️ Ruby on Rails * 前情提要：我把我所學都埋藏在這裡了 去找吧！希望能幫助到新手！ 上一章節介紹了Rails基本的MVC架構 在這一章節我會介紹RESTful API 以及一些Rails專案中常用的命令 還有如何抓蟲子(debug)!
那我們就開始啦! GoGo!
✨ RESTful API: 什麼是 REST ? Representational State Transfer (REST) 是一種軟體架構 它對 API 的運作方式施加了條件 簡單來說就是大家一起規定製作API的標準架構
REST有主要有兩個核心精神：
使用Resource來當做識別的資源，也就是使用一個URL網址來代表一個Resource 同一個Resource則可以有不同的Representations格式變化。 RESTful帶給Rails最大的好處是：它幫助我們用一種比較標準化的方式來命名跟組織Controllers和Actions 將RESTful帶入Rails路由系統的點子，出自它對應了HTTP動詞POST、GET、PATCH/PUT、DELETE到資料的新增、讀取、更新、刪除等四項操作。
🌰 舉個栗子： resources :events 如此就會自動建立四個命名路由(named routes)，搭配四個HTTP動詞，對應到七個Actions
Helper GET POST PATCH/PUT DELETE event_path(@event) /events/1 show action /events/1 update action /events/1 destroy action events_path /events index action /events create action edit_event_path(@event) /events/1/edit edit action new_event_path /events/new new action 詳細資料可以參考這個喔：Rails實戰聖經</description>
    </item>
    
    <item>
      <title>Rails寶典 第三章</title>
      <link>https://Owen5254.github.io/2023/02/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
      <pubDate>Wed, 08 Feb 2023 02:16:21 +0800</pubDate>
      
      <guid>https://Owen5254.github.io/2023/02/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
      <description>♦️ Ruby on Rails * 前情提要：我把我所學都埋藏在這裡了 去找吧！希望能幫助到新手！ 嗨囉！大家好啊！ 今天的這篇文章會跟大家分享models的關聯 寫完才發現篇幅有些大 所以下一章再來介紹 Devise 吧 !
那事不宜遲 GoGo !
✨ models表格關聯 primary_key 和 foreign_key : 再介紹有哪些關聯之前 我們先來介紹兩個重要的key
primary_key and foreign_key
primary key: primary key 簡單來說就是一筆資料在一個表格中的地址 他們被用來辨識每筆資料 需要注意的是他可以是多個欄位的 舉例來說像下面這格表格： 而在 rails 中 就算你不寫 在生出每一個表格的時候 他也預設會幫你做出一個 id 的欄位 並用 id 號碼作為 primary key
foreign key: foreign key 是用來做不同表格之間的關聯 Rails的慣例是「要被對到的那個 Model 的名字」加上 _id 在一張表格中 可以跟很多表格有關聯性的欄位 因此很常 foreign key 不只有一個 當然也不一定要是 primary key
關聯的型別： Rails models 有六種型別的關聯:</description>
    </item>
    
    <item>
      <title>Ruby手冊 第一章</title>
      <link>https://Owen5254.github.io/2023/01/ruby%E6%89%8B%E5%86%8A-%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Sat, 14 Jan 2023 15:08:28 +0800</pubDate>
      
      <guid>https://Owen5254.github.io/2023/01/ruby%E6%89%8B%E5%86%8A-%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>♦️ Ruby手冊 第一章 這篇文章中會著重介紹一些Ruby和其他語言的基礎差異 有興趣的話歡迎閱讀喔！
☘️ 變數（variable) 常數（Constant） 種類 範例 預設值 區域變數 （local variable） name 沒有 全域變數 （global variable) $name nil 實體變數 （instance variable） @name nil 類別變數 （class variable） @@name 沒有 ⭐️ 實體變數(@): 實體變數只能在類別內部訪問，如果要在外部訪問，需要定義讀寫方法 類別外部存取一個實體變數，可以定義讀寫方法，例如 attr_accessor
☘️判斷： # if if a &amp;gt; b: puts &amp;#39;a&amp;gt;b&amp;#39; elsif a = b: puts &amp;#39;a=b&amp;#39; else puts &amp;#39;a&amp;lt;b&amp;#39; end # unless unless is_adult?(20) puts &amp;#34;你是大人了&amp;#34; end # 相當於 if not if not is_adult?(20) puts &amp;#34;你是大人了&amp;#34; end # case weather = &amp;#34;下雨&amp;#34; case weather when &amp;#34;下雨&amp;#34; puts &amp;#34;待在家!</description>
    </item>
    
    <item>
      <title>Rails寶典 第一章</title>
      <link>https://Owen5254.github.io/2023/01/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Thu, 12 Jan 2023 17:09:21 +0800</pubDate>
      
      <guid>https://Owen5254.github.io/2023/01/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>🔥 Ruby on Rails 🔥 * 前情提要：我把我所學都埋藏在這裡了 去找吧！希望能幫助到新手！ Model View Controller : 這是最重要的概念了 整個Rails專案是採用MVC(Model View Controller)所設計的 這裡借用一張圖來說明關係 使用者輸入網址 第一關會遇到的是Route (config/routes.rb） Rails 會根據使用者輸入的網址及參數 告訴你應該去找哪個 Controller 上的哪個 Action Controller通常會有多個action(也就是多個method)這個 Action 會決定要做什麼事 接著可能會call Model請它幫忙查資料 Model 本身並不是資料庫 ! 但它可以會自己轉成資料庫看得懂的資料庫查詢語言 來和資料庫溝通 Model 跟資料庫取得你想要的資料 Model 把這包資料交回 Controller/Action 手上 之後controller 會跟對應的View借畫面 Controller/action 把資料跟View的畫面組合 最後呈現給使用者看 Controller Controller 就是放在專案的 app/controllers 目錄裡 如果類別的名稱叫做 PostsController 檔案的名字就會是 posts_controller.rb
Model 跟 Model 相關的檔案都放在 app/models 目錄裡
View 舉例來說 跟 PostsController 相關的 View 就會放在 app/views/posts 目錄裡</description>
    </item>
    
    <item>
      <title>Rails寶典 第一章</title>
      <link>https://Owen5254.github.io/2023/01/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%80%E7%AB%A0/</link>
      <pubDate>Thu, 12 Jan 2023 17:09:21 +0800</pubDate>
      
      <guid>https://Owen5254.github.io/2023/01/rails%E5%AF%B6%E5%85%B8-%E7%AC%AC%E4%B8%80%E7%AB%A0/</guid>
      <description>♦️ Ruby on Rails * 前情提要：我把我所學都埋藏在這裡了 去找吧！希望能幫助到新手！ 哈囉！ 今天跟大家分享Rails中很強大的套件就是 Devise！ 那我們就開始吧！GoGo!
✨ Devise： Devise 是 Rails 中一套最有名的使用者認證套件 他可以幫你快速產生一套完整的使用者註冊登入介面 以下是使用方法：
☘️ 安裝 Devise： gem &amp;#39;devise&amp;#39; 然後記得 bundle install 安裝套件 之後輸入rails g devise:install產生devise設定檔
rails g devise:install 編輯 config/environments/development.rb 和 production.rb 加入寄信時預設的網站網址
config.action_mailer.default_url_options = { :host =&amp;gt; &amp;#39;localhost:3000&amp;#39; } 輸入 rails g devise user產生 User model 及 Migration
rails g devise user 輸入 rails generate devise:views產生HTML樣板 放在app/views/devise 目錄下
rails g devise:views ☘️ Devise 使用方法： 在需要登入的 controller 加上before_action :authenticate_user!</description>
    </item>
    
  </channel>
</rss>
